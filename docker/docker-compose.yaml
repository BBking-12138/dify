services:
  # API service
  api:
    image: langgenius/dify-api:0.6.10
    restart: always
    environment:
      MODE: api
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEBUG : ${DEBUG:-true}
      SECRET_KEY: ${SECRET_KEY:-sk-9f73s3ljTXVcMT3Blb3ljTqtsKiGHXVcMT3BlbkFJLK7U}
      CONSOLE_WEB_URL: ${CONSOLE_WEB_URL:-}
      INIT_PASSWORD: ${INIT_PASSWORD:-}
      CONSOLE_API_URL: ${CONSOLE_API_URL:-}
      SERVICE_API_URL: ${SERVICE_API_URL:-}
      APP_WEB_URL: ${APP_WEB_URL:-}
      FILES_URL: ${FILES_URL:-}
      MIGRATION_ENABLED: ${MIGRATION_ENABLED:-true}
      DB_USERNAME: ${PGUSER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-difyai123456}
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-5432}
      DB_DATABASE: ${DB_DATABASE:-dify}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_USERNAME: ${REDIS_USERNAME:-}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-difyai123456}
      REDIS_USE_SSL: ${REDIS_USE_SSL:-false}
      REDIS_DB: ${REDIS_DB:-0}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://:difyai123456@redis:6379/1}
      WEB_API_CORS_ALLOW_ORIGINS: ${WEB_API_CORS_ALLOW_ORIGINS:-*}
      CONSOLE_CORS_ALLOW_ORIGINS: ${CONSOLE_CORS_ALLOW_ORIGINS:-*}
      STORAGE_TYPE: ${STORAGE_TYPE:-local}
      STORAGE_LOCAL_PATH: ${STORAGE_LOCAL_PATH:-storage}
      S3_ENDPOINT: ${S3_ENDPOINT:-https://xxx.r2.cloudflarestorage.com}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-difyai}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-ak-difyai}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-sk-difyai}
      S3_REGION: ${S3_REGION:-us-east-1}
      AZURE_BLOB_ACCOUNT_NAME: ${AZURE_BLOB_ACCOUNT_NAME:-difyai}
      AZURE_BLOB_ACCOUNT_KEY: ${AZURE_BLOB_ACCOUNT_KEY:-difyai}
      AZURE_BLOB_CONTAINER_NAME: ${AZURE_BLOB_CONTAINER_NAME:-difyai-container}
      AZURE_BLOB_ACCOUNT_URL: ${AZURE_BLOB_ACCOUNT_URL:-https://<your_account_name>.blob.core.windows.net}
      GOOGLE_STORAGE_BUCKET_NAME: ${GOOGLE_STORAGE_BUCKET_NAME:-yout-bucket-name}
      GOOGLE_STORAGE_SERVICE_ACCOUNT_JSON_BASE64: ${GOOGLE_STORAGE_SERVICE_ACCOUNT_JSON_BASE64:-}
      ALIYUN_OSS_BUCKET_NAME: ${ALIYUN_OSS_BUCKET_NAME:-your-bucket-name}
      ALIYUN_OSS_ACCESS_KEY: ${ALIYUN_OSS_ACCESS_KEY:-your-access-key}
      ALIYUN_OSS_SECRET_KEY: ${ALIYUN_OSS_SECRET_KEY:-your-secret-key}
      ALIYUN_OSS_ENDPOINT: ${ALIYUN_OSS_ENDPOINT:-https://oss-ap-southeast-1-internal.aliyuncs.com}
      ALIYUN_OSS_REGION: ${ALIYUN_OSS_REGION:-ap-southeast-1}
      ALIYUN_OSS_AUTH_VERSION: ${ALIYUN_OSS_AUTH_VERSION:-v4}
      TENCENT_COS_BUCKET_NAME: ${TENCENT_COS_BUCKET_NAME:-your-bucket-name}
      TENCENT_COS_SECRET_KEY: ${TENCENT_COS_SECRET_KEY:-your-secret-key}
      TENCENT_COS_SECRET_ID: ${TENCENT_COS_SECRET_ID:-your-secret-id}
      TENCENT_COS_REGION: ${TENCENT_COS_REGION:-your-region}
      TENCENT_COS_SCHEME: ${TENCENT_COS_SCHEME:-your-scheme}
      VECTOR_STORE: ${VECTOR_STORE:-weaviate}
      WEAVIATE_ENDPOINT: ${WEAVIATE_ENDPOINT:-http://weaviate:8080}
      WEAVIATE_API_KEY: ${AUTHENTICATION_APIKEY_ALLOWED_KEYS:-WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih}
      QDRANT_URL: ${QDRANT_URL:-http://qdrant:6333}
      QDRANT_API_KEY: ${QDRANT_API_KEY:-difyai123456}
      QDRANT_CLIENT_TIMEOUT: ${QDRANT_CLIENT_TIMEOUT:-20}
      QDRANT_GRPC_ENABLED: ${QDRANT_GRPC_ENABLED:-false}
      QDRANT_GRPC_PORT: ${QDRANT_GRPC_PORT:-6334}
      MILVUS_HOST: ${MILVUS_HOST:-127.0.0.1}
      MILVUS_PORT: ${MILVUS_PORT:-19530}
      MILVUS_USER: ${MILVUS_USER:-root}
      MILVUS_PASSWORD: ${MILVUS_PASSWORD:-Milvus}
      MILVUS_SECURE: ${MILVUS_SECURE:-false}
      PGVECTOR_HOST: ${PGVECTOR_HOST:-pgvector}
      PGVECTOR_PORT: ${PGVECTOR_PORT:-5432}
      PGVECTOR_USER: ${PGVECTOR_USER:-postgres}
      PGVECTOR_PASSWORD: ${PGVECTOR_PASSWORD:-difyai123456}
      PGVECTOR_DATABASE: ${PGVECTOR_DATABASE:-dify}
      TIDB_VECTOR_HOST: ${TIDB_VECTOR_HOST:-tidb}
      TIDB_VECTOR_PORT: ${TIDB_VECTOR_PORT:-4000}
      TIDB_VECTOR_USER: ${TIDB_VECTOR_USER:-xxx.root}
      TIDB_VECTOR_PASSWORD: ${TIDB_VECTOR_PASSWORD:-xxxxxx}
      TIDB_VECTOR_DATABASE: ${TIDB_VECTOR_DATABASE:-dify}
      CHROMA_HOST: ${CHROMA_HOST:-127.0.0.1}
      CHROMA_PORT: ${CHROMA_PORT:-8000}
      CHROMA_TENANT: ${CHROMA_TENANT:-default_tenant}
      CHROMA_DATABASE: ${CHROMA_DATABASE:-default_database}
      CHROMA_AUTH_PROVIDER: ${CHROMA_AUTH_PROVIDER:-chromadb.auth.token_authn.TokenAuthClientProvider}
      CHROMA_AUTH_CREDENTIALS: ${CHROMA_AUTH_CREDENTIALS:-xxxxxx}
      ORACLE_HOST: ${ORACLE_HOST:-oracle}
      ORACLE_PORT: ${ORACLE_PORT:-1521}
      ORACLE_USER: ${ORACLE_USER:-dify}
      ORACLE_PASSWORD: ${ORACLE_PASSWORD:-dify}
      ORACLE_DATABASE: ${ORACLE_DATABASE:-FREEPDB1}
      RELYT_HOST: ${RELYT_HOST:-db}
      RELYT_PORT: ${RELYT_PORT:-5432}
      RELYT_USER: ${RELYT_USER:-postgres}
      RELYT_PASSWORD: ${RELYT_PASSWORD:-difyai123456}
      RELYT_DATABASE: ${RELYT_DATABASE:-postgres}
      OPENSEARCH_HOST: ${OPENSEARCH_HOST:-127.0.0.1}
      OPENSEARCH_PORT: ${OPENSEARCH_PORT:-9200}
      OPENSEARCH_USER: ${OPENSEARCH_USER:-admin}
      OPENSEARCH_PASSWORD: ${OPENSEARCH_PASSWORD:-admin}
      OPENSEARCH_SECURE: ${OPENSEARCH_SECURE:-true}
      MAIL_TYPE: ${MAIL_TYPE:-}
      MAIL_DEFAULT_SEND_FROM: ${MAIL_DEFAULT_SEND_FROM:-e.g. no-reply <no-reply@dify.ai>}
      SMTP_SERVER: ${SMTP_SERVER:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_USE_TLS: ${SMTP_USE_TLS:-true}
      RESEND_API_KEY: ${RESEND_API_KEY:-}
      RESEND_API_URL: ${RESEND_API_URL:-https://api.resend.com}
      SENTRY_DSN: ${SENTRY_DSN:-}
      SENTRY_TRACES_SAMPLE_RATE: ${SENTRY_TRACES_SAMPLE_RATE:-1.0}
      SENTRY_PROFILES_SAMPLE_RATE: ${SENTRY_PROFILES_SAMPLE_RATE:-1.0}
      NOTION_INTEGRATION_TYPE: ${NOTION_INTEGRATION_TYPE:-public}
      NOTION_CLIENT_SECRET: ${NOTION_CLIENT_SECRET:-you-client-secret}
      NOTION_CLIENT_ID: ${NOTION_CLIENT_ID:-you-client-id}
      NOTION_INTERNAL_SECRET: ${NOTION_INTERNAL_SECRET:-you-internal-secret}
      CODE_EXECUTION_ENDPOINT: ${CODE_EXECUTION_ENDPOINT:-http://sandbox:8194}
      CODE_EXECUTION_API_KEY: ${CODE_EXECUTION_API_KEY:-dify-sandbox}
      CODE_MAX_NUMBER: ${CODE_MAX_NUMBER:-9223372036854775807}
      CODE_MIN_NUMBER: ${CODE_MIN_NUMBER:- -9223372036854775808}
      CODE_MAX_STRING_LENGTH: ${CODE_MAX_STRING_LENGTH:-80000}
      TEMPLATE_TRANSFORM_MAX_LENGTH: ${TEMPLATE_TRANSFORM_MAX_LENGTH:-80000}
      CODE_MAX_STRING_ARRAY_LENGTH: ${CODE_MAX_STRING_ARRAY_LENGTH:-30}
      CODE_MAX_OBJECT_ARRAY_LENGTH: ${CODE_MAX_OBJECT_ARRAY_LENGTH:-30}
      CODE_MAX_NUMBER_ARRAY_LENGTH: ${CODE_MAX_NUMBER_ARRAY_LENGTH:-1000}
      SSRF_PROXY_HTTP_URL: ${SSRF_PROXY_HTTP_URL:-'http://ssrf_proxy:3128'}
      SSRF_PROXY_HTTPS_URL: ${SSRF_PROXY_HTTPS_URL:-'http://ssrf_proxy:3128'}
      INDEXING_MAX_SEGMENTATION_TOKENS_LENGTH: ${INDEXING_MAX_SEGMENTATION_TOKENS_LENGTH:-1000}
    depends_on:
      - db
      - redis
    volumes:
      # Mount the storage directory to the container, for storing user files.
      - ./volumes/app/storage:/app/api/storage
    # uncomment to expose dify-api port to host
    # ports:
    #   - "5001:5001"
    networks:
      - ssrf_proxy_network
      - default

  # worker service
  # The Celery worker for processing the queue.
  worker:
    image: langgenius/dify-api:0.6.10
    restart: always
    environment:
      # Startup mode, 'worker' starts the Celery worker for processing the queue.
      MODE: worker

      # -- all variables below are identical to the api service --
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEBUG : ${DEBUG:-true}
      SECRET_KEY: ${SECRET_KEY:-sk-9f73s3ljTXVcMT3Blb3ljTqtsKiGHXVcMT3BlbkFJLK7U}
      CONSOLE_WEB_URL: ${CONSOLE_WEB_URL:-}
      INIT_PASSWORD: ${INIT_PASSWORD:-}
      CONSOLE_API_URL: ${CONSOLE_API_URL:-}
      SERVICE_API_URL: ${SERVICE_API_URL:-}
      APP_WEB_URL: ${APP_WEB_URL:-}
      FILES_URL: ${FILES_URL:-}
      MIGRATION_ENABLED: ${MIGRATION_ENABLED:-true}
      DB_USERNAME: ${PGUSER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-difyai123456}
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-5432}
      DB_DATABASE: ${DB_DATABASE:-dify}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_USERNAME: ${REDIS_USERNAME:-}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-difyai123456}
      REDIS_USE_SSL: ${REDIS_USE_SSL:-false}
      REDIS_DB: ${REDIS_DB:-0}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://:difyai123456@redis:6379/1}
      WEB_API_CORS_ALLOW_ORIGINS: ${WEB_API_CORS_ALLOW_ORIGINS:-*}
      CONSOLE_CORS_ALLOW_ORIGINS: ${CONSOLE_CORS_ALLOW_ORIGINS:-*}
      STORAGE_TYPE: ${STORAGE_TYPE:-local}
      STORAGE_LOCAL_PATH: ${STORAGE_LOCAL_PATH:-storage}
      S3_ENDPOINT: ${S3_ENDPOINT:-https://xxx.r2.cloudflarestorage.com}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-difyai}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-ak-difyai}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-sk-difyai}
      S3_REGION: ${S3_REGION:-us-east-1}
      AZURE_BLOB_ACCOUNT_NAME: ${AZURE_BLOB_ACCOUNT_NAME:-difyai}
      AZURE_BLOB_ACCOUNT_KEY: ${AZURE_BLOB_ACCOUNT_KEY:-difyai}
      AZURE_BLOB_CONTAINER_NAME: ${AZURE_BLOB_CONTAINER_NAME:-difyai-container}
      AZURE_BLOB_ACCOUNT_URL: ${AZURE_BLOB_ACCOUNT_URL:-https://<your_account_name>.blob.core.windows.net}
      GOOGLE_STORAGE_BUCKET_NAME: ${GOOGLE_STORAGE_BUCKET_NAME:-yout-bucket-name}
      GOOGLE_STORAGE_SERVICE_ACCOUNT_JSON_BASE64: ${GOOGLE_STORAGE_SERVICE_ACCOUNT_JSON_BASE64:-}
      ALIYUN_OSS_BUCKET_NAME: ${ALIYUN_OSS_BUCKET_NAME:-your-bucket-name}
      ALIYUN_OSS_ACCESS_KEY: ${ALIYUN_OSS_ACCESS_KEY:-your-access-key}
      ALIYUN_OSS_SECRET_KEY: ${ALIYUN_OSS_SECRET_KEY:-your-secret-key}
      ALIYUN_OSS_ENDPOINT: ${ALIYUN_OSS_ENDPOINT:-https://oss-ap-southeast-1-internal.aliyuncs.com}
      ALIYUN_OSS_REGION: ${ALIYUN_OSS_REGION:-ap-southeast-1}
      ALIYUN_OSS_AUTH_VERSION: ${ALIYUN_OSS_AUTH_VERSION:-v4}
      TENCENT_COS_BUCKET_NAME: ${TENCENT_COS_BUCKET_NAME:-your-bucket-name}
      TENCENT_COS_SECRET_KEY: ${TENCENT_COS_SECRET_KEY:-your-secret-key}
      TENCENT_COS_SECRET_ID: ${TENCENT_COS_SECRET_ID:-your-secret-id}
      TENCENT_COS_REGION: ${TENCENT_COS_REGION:-your-region}
      TENCENT_COS_SCHEME: ${TENCENT_COS_SCHEME:-your-scheme}
      VECTOR_STORE: ${VECTOR_STORE:-weaviate}
      WEAVIATE_ENDPOINT: ${WEAVIATE_ENDPOINT:-http://weaviate:8080}
      WEAVIATE_API_KEY: ${AUTHENTICATION_APIKEY_ALLOWED_KEYS:-WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih}
      QDRANT_URL: ${QDRANT_URL:-http://qdrant:6333}
      QDRANT_API_KEY: ${QDRANT_API_KEY:-difyai123456}
      QDRANT_CLIENT_TIMEOUT: ${QDRANT_CLIENT_TIMEOUT:-20}
      QDRANT_GRPC_ENABLED: ${QDRANT_GRPC_ENABLED:-false}
      QDRANT_GRPC_PORT: ${QDRANT_GRPC_PORT:-6334}
      MILVUS_HOST: ${MILVUS_HOST:-127.0.0.1}
      MILVUS_PORT: ${MILVUS_PORT:-19530}
      MILVUS_USER: ${MILVUS_USER:-root}
      MILVUS_PASSWORD: ${MILVUS_PASSWORD:-Milvus}
      MILVUS_SECURE: ${MILVUS_SECURE:-false}
      PGVECTOR_HOST: ${PGVECTOR_HOST:-pgvector}
      PGVECTOR_PORT: ${PGVECTOR_PORT:-5432}
      PGVECTOR_USER: ${PGVECTOR_USER:-postgres}
      PGVECTOR_PASSWORD: ${PGVECTOR_PASSWORD:-difyai123456}
      PGVECTOR_DATABASE: ${PGVECTOR_DATABASE:-dify}
      TIDB_VECTOR_HOST: ${TIDB_VECTOR_HOST:-tidb}
      TIDB_VECTOR_PORT: ${TIDB_VECTOR_PORT:-4000}
      TIDB_VECTOR_USER: ${TIDB_VECTOR_USER:-xxx.root}
      TIDB_VECTOR_PASSWORD: ${TIDB_VECTOR_PASSWORD:-xxxxxx}
      TIDB_VECTOR_DATABASE: ${TIDB_VECTOR_DATABASE:-dify}
      CHROMA_HOST: ${CHROMA_HOST:-127.0.0.1}
      CHROMA_PORT: ${CHROMA_PORT:-8000}
      CHROMA_TENANT: ${CHROMA_TENANT:-default_tenant}
      CHROMA_DATABASE: ${CHROMA_DATABASE:-default_database}
      CHROMA_AUTH_PROVIDER: ${CHROMA_AUTH_PROVIDER:-chromadb.auth.token_authn.TokenAuthClientProvider}
      CHROMA_AUTH_CREDENTIALS: ${CHROMA_AUTH_CREDENTIALS:-xxxxxx}
      ORACLE_HOST: ${ORACLE_HOST:-oracle}
      ORACLE_PORT: ${ORACLE_PORT:-1521}
      ORACLE_USER: ${ORACLE_USER:-dify}
      ORACLE_PASSWORD: ${ORACLE_PASSWORD:-dify}
      ORACLE_DATABASE: ${ORACLE_DATABASE:-FREEPDB1}
      RELYT_HOST: ${RELYT_HOST:-db}
      RELYT_PORT: ${RELYT_PORT:-5432}
      RELYT_USER: ${RELYT_USER:-postgres}
      RELYT_PASSWORD: ${RELYT_PASSWORD:-difyai123456}
      RELYT_DATABASE: ${RELYT_DATABASE:-postgres}
      OPENSEARCH_HOST: ${OPENSEARCH_HOST:-127.0.0.1}
      OPENSEARCH_PORT: ${OPENSEARCH_PORT:-9200}
      OPENSEARCH_USER: ${OPENSEARCH_USER:-admin}
      OPENSEARCH_PASSWORD: ${OPENSEARCH_PASSWORD:-admin}
      OPENSEARCH_SECURE: ${OPENSEARCH_SECURE:-true}
      MAIL_TYPE: ${MAIL_TYPE:-}
      MAIL_DEFAULT_SEND_FROM: ${MAIL_DEFAULT_SEND_FROM:-e.g. no-reply <no-reply@dify.ai>}
      SMTP_SERVER: ${SMTP_SERVER:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_USE_TLS: ${SMTP_USE_TLS:-true}
      RESEND_API_KEY: ${RESEND_API_KEY:-}
      RESEND_API_URL: ${RESEND_API_URL:-https://api.resend.com}
      SENTRY_DSN: ${SENTRY_DSN:-}
      SENTRY_TRACES_SAMPLE_RATE: ${SENTRY_TRACES_SAMPLE_RATE:-1.0}
      SENTRY_PROFILES_SAMPLE_RATE: ${SENTRY_PROFILES_SAMPLE_RATE:-1.0}
      NOTION_INTEGRATION_TYPE: ${NOTION_INTEGRATION_TYPE:-public}
      NOTION_CLIENT_SECRET: ${NOTION_CLIENT_SECRET:-you-client-secret}
      NOTION_CLIENT_ID: ${NOTION_CLIENT_ID:-you-client-id}
      NOTION_INTERNAL_SECRET: ${NOTION_INTERNAL_SECRET:-you-internal-secret}
      CODE_EXECUTION_ENDPOINT: ${CODE_EXECUTION_ENDPOINT:-http://sandbox:8194}
      CODE_EXECUTION_API_KEY: ${CODE_EXECUTION_API_KEY:-dify-sandbox}
      CODE_MAX_NUMBER: ${CODE_MAX_NUMBER:-9223372036854775807}
      CODE_MIN_NUMBER: ${CODE_MIN_NUMBER:- -9223372036854775808}
      CODE_MAX_STRING_LENGTH: ${CODE_MAX_STRING_LENGTH:-80000}
      TEMPLATE_TRANSFORM_MAX_LENGTH: ${TEMPLATE_TRANSFORM_MAX_LENGTH:-80000}
      CODE_MAX_STRING_ARRAY_LENGTH: ${CODE_MAX_STRING_ARRAY_LENGTH:-30}
      CODE_MAX_OBJECT_ARRAY_LENGTH: ${CODE_MAX_OBJECT_ARRAY_LENGTH:-30}
      CODE_MAX_NUMBER_ARRAY_LENGTH: ${CODE_MAX_NUMBER_ARRAY_LENGTH:-1000}
      SSRF_PROXY_HTTP_URL: ${SSRF_PROXY_HTTP_URL:-'http://ssrf_proxy:3128'}
      SSRF_PROXY_HTTPS_URL: ${SSRF_PROXY_HTTPS_URL:-'http://ssrf_proxy:3128'}
      INDEXING_MAX_SEGMENTATION_TOKENS_LENGTH: ${INDEXING_MAX_SEGMENTATION_TOKENS_LENGTH:-1000}
    depends_on:
      - db
      - redis
    volumes:
      # Mount the storage directory to the container, for storing user files.
      - ./volumes/app/storage:/app/api/storage
    networks:
      - ssrf_proxy_network
      - default

  # Frontend web application.
  web:
    image: langgenius/dify-web:0.6.10
    restart: always
    environment:
      CONSOLE_API_URL: ${CONSOLE_API_URL:-}
      APP_API_URL: ${APP_API_URL:-}
      SENTRY_DSN: ${SENTRY_DSN:-}
    # uncomment to expose dify-web port to host
    # ports:
    #   - "3000:3000"

  # The postgres database.
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      PGUSER: ${PGUSER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-difyai123456}
      POSTGRES_DB: ${POSTGRES_DB:-dify}
      PGDATA: ${PGDATA:-/var/lib/postgresql/data/pgdata}
    volumes:
      - ./volumes/db/data:/var/lib/postgresql/data
    # uncomment to expose db(postgresql) port to host
    # ports:
    #   - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 1s
      timeout: 3s
      retries: 30

  # The redis cache.
  redis:
    image: redis:6-alpine
    restart: always
    volumes:
      # Mount the redis data directory to the container.
      - ./volumes/redis/data:/data
    # Set the redis password when startup redis server.
    command: redis-server --requirepass difyai123456
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
    # uncomment to expose redis port to host
    # ports:
    #   - "6379:6379"

  # The DifySandbox
  sandbox:
    image: langgenius/dify-sandbox:0.2.1
    restart: always
    environment:
      # The DifySandbox configurations
      # Make sure you are changing this key for your deployment with a strong key.
      # You can generate a strong key using `openssl rand -base64 42`.
      API_KEY: ${API_KEY:-dify-sandbox}
      GIN_MODE: ${GIN_MODE:-release}
      WORKER_TIMEOUT: ${WORKER_TIMEOUT:-15}
      ENABLE_NETWORK: ${ENABLE_NETWORK:-true}
      HTTP_PROXY: ${HTTP_PROXY:-http://ssrf_proxy:3128}
      HTTPS_PROXY: ${HTTPS_PROXY:-http://ssrf_proxy:3128}
      SANDBOX_PORT: ${SANDBOX_PORT:-8194}
    volumes:
      - ./volumes/sandbox/dependencies:/dependencies
    networks:
      - ssrf_proxy_network

  # ssrf_proxy server
  # for more information, please refer to
  # https://docs.dify.ai/getting-started/install-self-hosted/install-faq#id-16.-why-is-ssrf_proxy-needed
  ssrf_proxy:
    image: ubuntu/squid:latest
    restart: always
    volumes:
      - ./ssrf_proxy/squid.conf.template:/etc/squid/squid.conf.template
      - ./ssrf_proxy/docker-entrypoint.sh:/docker-entrypoint.sh
    entrypoint: /docker-entrypoint.sh
    environment:
      # pls clearly modify the squid env vars to fit your network environment.
      HTTP_PORT: ${HTTP_PORT:-3128}
      COREDUMP_DIR: ${COREDUMP_DIR:-/var/spool/squid}
      REVERSE_PROXY_PORT: ${REVERSE_PROXY_PORT:-8194}
      SANDBOX_HOST: ${SANDBOX_HOST:-sandbox}
      SANDBOX_PORT: ${SANDBOX_PORT:-8194}
    networks:
      - ssrf_proxy_network
      - default

  # The nginx reverse proxy.
  # used for reverse proxying the API service and Web service.
  nginx:
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template
      - ./nginx/proxy.conf.template:/etc/nginx/proxy.conf.template
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/docker-entrypoint.sh:/docker-entrypoint.sh
      - ./nginx/ssl:/etc/ssl
    entrypoint: /docker-entrypoint.sh
    environment:
      NGINX_SERVER_NAME: ${NGINX_SERVER_NAME:-_}
      HTTPS_ENABLED: ${HTTPS_ENABLED:-false}
      NGINX_SSL_PORT: ${NGINX_SSL_PORT:-443}
      # You're required to add your own SSL certificates/keys to the `./nginx/ssl` directory
      # and modify the env vars below in .env if HTTPS_ENABLED is true.
      NGINX_SSL_CERT_FILENAME: ${NGINX_SSL_CERT_FILENAME:-dify.crt}
      NGINX_SSL_CERT_KEY_FILENAME: ${NGINX_SSL_CERT_KEY_FILENAME:-dify.key}
      NGINX_SSL_PROTOCOLS: ${NGINX_SSL_PROTOCOLS:-TLSv1.1 TLSv1.2 TLSv1.3}
      NGINX_WORKER_PROCESSES: ${NGINX_WORKER_PROCESSES:-auto}
      NGINX_CLIENT_MAX_BODY_SIZE: ${NGINX_CLIENT_MAX_BODY_SIZE:-15M}
      NGINX_KEEPALIVE_TIMEOUT: ${NGINX_KEEPALIVE_TIMEOUT:-65}
      NGINX_PROXY_READ_TIMEOUT: ${NGINX_PROXY_READ_TIMEOUT:-3600s}
      NGINX_PROXY_SEND_TIMEOUT: ${NGINX_PROXY_SEND_TIMEOUT:-3600s}
    depends_on:
      - api
      - web
    ports:
      - "80:80"
      - "${NGINX_SSL_PORT:-443}:443"

  # The Weaviate vector store.
  weaviate:
    image: semitechnologies/weaviate:1.19.0
    profiles:
      - weaviate
    restart: always
    volumes:
      # Mount the Weaviate data directory to the con tainer.
      - ./volumes/weaviate:/var/lib/weaviate
    environment:
      # The Weaviate configurations
      # You can refer to the [Weaviate](https://weaviate.io/developers/weaviate/config-refs/env-vars) documentation for more information.
      PERSISTENCE_DATA_PATH: ${PERSISTENCE_DATA_PATH:-/var/lib/weaviate}
      QUERY_DEFAULTS_LIMIT: ${QUERY_DEFAULTS_LIMIT:-25}
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: ${AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED:-false}
      DEFAULT_VECTORIZER_MODULE: ${DEFAULT_VECTORIZER_MODULE:-none}
      CLUSTER_HOSTNAME: ${CLUSTER_HOSTNAME:-node1}
      AUTHENTICATION_APIKEY_ENABLED: ${AUTHENTICATION_APIKEY_ENABLED:-true}
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: ${AUTHENTICATION_APIKEY_ALLOWED_KEYS:-WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih}
      AUTHENTICATION_APIKEY_USERS: ${AUTHENTICATION_APIKEY_USERS:-hello@dify.ai}
      AUTHORIZATION_ADMINLIST_ENABLED: ${AUTHORIZATION_ADMINLIST_ENABLED:-true}
      AUTHORIZATION_ADMINLIST_USERS: ${AUTHORIZATION_ADMINLIST_USERS:-hello@dify.ai}
    # uncomment to expose weaviate port to host
    # ports:
    #  - "8080:8080"


  # Qdrant vector store.
  # (if used, you need to set VECTOR_STORE to qdrant in the api & worker service.)
  qdrant:
    image: langgenius/qdrant:v1.7.3
    profiles:
      - qdrant
    restart: always
    volumes:
      - ./volumes/qdrant:/qdrant/storage
    environment:
      QDRANT_API_KEY: ${QDRANT_API_KEY:-difyai123456}
    # uncomment to expose qdrant port to host
    # ports:
    #  - "6333:6333"
    #  - "6334:6334"

  # The pgvector vector database.
  pgvector:
    image: pgvector/pgvector:pg16
    profiles:
      - pgvector
    restart: always
    environment:
      PGUSER: ${PGUSER:-postgres}
      # The password for the default postgres user.
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-difyai123456}
      # The name of the default postgres database.
      POSTGRES_DB: ${POSTGRES_DB:-dify}
      # postgres data directory
      PGDATA: ${PGDATA:-/var/lib/postgresql/data/pgdata}
    volumes:
      - ./volumes/pgvector/data:/var/lib/postgresql/data
    # uncomment to expose db(postgresql) port to host
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 1s
      timeout: 3s
      retries: 30

  # pgvecto-rs vector store
  pgvecto-rs:
    image: tensorchord/pgvecto-rs:pg16-v0.2.0
    profiles:
      - pgvecto-rs
    restart: always
    environment:
      PGUSER: ${PGUSER:-postgres}
      # The password for the default postgres user.
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-difyai123456}
      # The name of the default postgres database.
      POSTGRES_DB: ${POSTGRES_DB:-dify}
      # postgres data directory
      PGDATA: ${PGDATA:-/var/lib/postgresql/data/pgdata}
    volumes:
      - ./volumes/pgvecto_rs/data:/var/lib/postgresql/data
    # uncomment to expose db(postgresql) port to host
    ports:
      - "5431:5432"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 1s
      timeout: 3s
      retries: 30

  # Chroma vector database
  chroma:
    image: ghcr.io/chroma-core/chroma:0.5.0
    profiles:
      - chroma
    restart: always
    volumes:
      - ./volumes/chroma:/chroma/chroma
    environment:
      CHROMA_SERVER_AUTHN_CREDENTIALS: ${CHROMA_SERVER_AUTHN_CREDENTIALS:-difyai123456}
      CHROMA_SERVER_AUTHN_PROVIDER: ${CHROMA_SERVER_AUTHN_PROVIDER:-chromadb.auth.token_authn.TokenAuthenticationServerProvider}
      IS_PERSISTENT: ${IS_PERSISTENT:-TRUE}
    ports:
      - "8000:8000"

  oracle:
    image: container-registry.oracle.com/database/free:latest
    profiles:
      - oracle
    restart: always
    ports:
      - 1521:1521
    volumes:
      - type: volume
        source: oradata_vector
        target: /opt/oracle/oradata
      - ./startupscripts:/opt/oracle/scripts/startup
    environment:
      - ORACLE_PWD=${ORACLE_PWD:-Dify123456}
      - ORACLE_CHARACTERSET=${ORACLE_CHARACTERSET:-AL32UTF8}

  # Milvus vector database services
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    profiles:
      - milvus
    environment:
      - ETCD_AUTO_COMPACTION_MODE=${ETCD_AUTO_COMPACTION_MODE:-revision}
      - ETCD_AUTO_COMPACTION_RETENTION=${ETCD_AUTO_COMPACTION_RETENTION:-1000}
      - ETCD_QUOTA_BACKEND_BYTES=${ETCD_QUOTA_BACKEND_BYTES:-4294967296}
      - ETCD_SNAPSHOT_COUNT=${ETCD_SNAPSHOT_COUNT:-50000}
    volumes:
      - ./volumes/milvus/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - milvus

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    profiles:
      - milvus
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ./volumes/milvus/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - milvus

  milvus-standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.3.1
    profiles:
      - milvus
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: ${ETCD_ENDPOINTS:-etcd:2379}
      MINIO_ADDRESS: ${MINIO_ADDRESS:-minio:9000}
      common.security.authorizationEnabled: ${MILVUS_AUTHORIZATION_ENABLED:-true}
    volumes:
      - ./volumes/milvus/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - milvus

  opensearch:
    container_name: opensearch
    image: opensearchproject/opensearch:latest
    profiles:
      - opensearch
    environment:
      - discovery.type=${OPENSEARCH_DISCOVERY_TYPE:-single-node}
      - bootstrap.memory_lock=${OPENSEARCH_BOOTSTRAP_MEMORY_LOCK:-true}
      - OPENSEARCH_JAVA_OPTS=-Xms${OPENSEARCH_JAVA_OPTS_MIN:-512m} -Xmx${OPENSEARCH_JAVA_OPTS_MAX:-1024m}
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_INITIAL_ADMIN_PASSWORD:-Qazwsxedc!@#123}
    ulimits:
      memlock:
        soft: ${OPENSEARCH_MEMLOCK_SOFT:--1}
        hard: ${OPENSEARCH_MEMLOCK_HARD:--1}
      nofile:
        soft: ${OPENSEARCH_NOFILE_SOFT:-65536}
        hard: ${OPENSEARCH_NOFILE_HARD:-65536}
    volumes:
      - ./volumes/opensearch/data:/usr/share/opensearch/data
    ports:
      - "9200:9200"
      - "9600:9600"
    networks:
      - opensearch-net

  opensearch-dashboards:
    container_name: opensearch-dashboards
    image: opensearchproject/opensearch-dashboards:latest
    profiles:
      - opensearch
    ports:
      - "5601:5601"
    expose:
      - "5601"
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch:9200"]'
    volumes:
      - ./volumes/opensearch/opensearch_dashboards.yml:/usr/share/opensearch-dashboards/config/opensearch_dashboards.yml
    networks:
      - opensearch-net
    depends_on:
      - opensearch

networks:
  # create a network between sandbox, api and ssrf_proxy, and can not access outside.
  ssrf_proxy_network:
    driver: bridge
    internal: true
  milvus:
    driver: bridge
    internal: true
  opensearch-net:
    driver: bridge
    internal: true

volumes:
  oradata: