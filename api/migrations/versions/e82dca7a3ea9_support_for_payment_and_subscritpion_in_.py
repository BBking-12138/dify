"""support for payment and subscritpion in the database

Revision ID: e82dca7a3ea9
Revises: eeb2e349e6ac
Create Date: 2024-07-31 07:53:57.830852

"""
from alembic import op
import models as models
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'e82dca7a3ea9'
down_revision = 'eeb2e349e6ac'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('base_plans',
    sa.Column('id', models.StringUUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('plan_type', sa.Enum('SANDBOX', 'PROFESSIONAL', 'TEAM', 'CUSTOM', name='plantype'), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('price_monthly', sa.Float(), nullable=False),
    sa.Column('price_yearly', sa.Float(), nullable=False),
    sa.Column('message_credits', sa.Integer(), nullable=False),
    sa.Column('team_members', sa.Integer(), nullable=False),
    sa.Column('build_apps', sa.Integer(), nullable=False),
    sa.Column('vector_storage', sa.Integer(), nullable=False),
    sa.Column('documents_upload_quota', sa.Integer(), nullable=False),
    sa.Column('documents_bulk_upload', sa.Boolean(), nullable=False),
    sa.Column('document_processing_priority', sa.Enum('STANDARD', 'PRIORITY', name='processingpriority'), nullable=False),
    sa.Column('message_requests', sa.Integer(), nullable=False),
    sa.Column('annotation_quota_limit', sa.Integer(), nullable=False),
    sa.Column('logs_history', sa.Integer(), nullable=False),
    sa.Column('custom_tools', sa.Integer(), nullable=False),
    sa.Column('support', sa.Enum('COMMUNITY_FORUMS', 'EMAIL_SUPPORT', 'PRIORITY_EMAIL_CHAT', name='supporttype'), nullable=False),
    sa.Column('custom_branding', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), nullable=False),
    sa.PrimaryKeyConstraint('id', name='base_plan_pkey'),
    sa.UniqueConstraint('plan_type', name='unique_plan_type')
    )
    op.create_table('transactions',
    sa.Column('id', models.StringUUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('tenant_id', models.StringUUID(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'SUCCEEDED', 'FAILED', 'REFUNDED', name='paymentstatus'), nullable=False),
    sa.Column('stripe_payment_intent_id', sa.String(length=255), nullable=True),
    sa.Column('stripe_customer_id', sa.String(length=255), nullable=True),
    sa.Column('stripe_payment_method_id', sa.String(length=255), nullable=True),
    sa.Column('stripe_invoice_id', sa.String(length=255), nullable=True),
    sa.Column('stripe_subscription_id', sa.String(length=255), nullable=True),
    sa.Column('payment_method_type', sa.String(length=50), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id', name='transaction_pkey')
    )
    op.create_table('tenant_plans',
    sa.Column('id', models.StringUUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('tenant_id', models.StringUUID(), nullable=False),
    sa.Column('base_plan_id', models.StringUUID(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('multiplier', sa.Float(), nullable=False),
    sa.Column('discount', sa.Float(), nullable=False),
    sa.Column('has_paid', sa.Boolean(), nullable=False),
    sa.Column('transaction_id', models.StringUUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), nullable=False),
    sa.ForeignKeyConstraint(['base_plan_id'], ['base_plans.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.ForeignKeyConstraint(['transaction_id'], ['transactions.id'], ),
    sa.PrimaryKeyConstraint('id', name='tenant_plan_pkey'),
    sa.UniqueConstraint('tenant_id', 'base_plan_id', 'start_date', name='unique_tenant_plan')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('tenant_plans')
    op.drop_table('transactions')
    op.drop_table('base_plans')
    # ### end Alembic commands ###
