from typing import Any, Union

from core.tools.entities.tool_entities import ToolInvokeMessage
from core.tools.provider.builtin.typewriter.tools.markdown_utils import MarkdownUtils
from core.tools.tool.builtin_tool import BuiltinTool


class MarkdownToPdfFile(BuiltinTool):
    def _invoke(
        self,
        user_id: str,
        tool_parameters: dict[str, Any],
    ) -> Union[ToolInvokeMessage, list[ToolInvokeMessage]]:
        """
        invoke tools
        """
        from xhtml2pdf import pisa

        # get expression
        markdown_text = tool_parameters.get("markdown_text")
        if not markdown_text:
            return self.create_text_message("Invalid input markdown_text")

        try:
            markdown_text = MarkdownUtils.strip_markdown_wrapper(markdown_text)
            html_str = self._convert_to_html(markdown_text)
            result_file_bytes = pisa.CreatePDF(
                src=html_str,
                dest_bytes=True,  # pass the generated bytes in return
                encoding="utf-8",
            )
        except Exception as e:
            return self.create_text_message(f"Failed to convert markdown text to PDF file, error: {str(e)}")

        return [
            self.create_text_message("The PDF file is saved."),
            self.create_blob_message(blob=result_file_bytes, meta={"mime_type": "application/pdf"}),
        ]

    @staticmethod
    def _convert_to_html(markdown_text: str) -> str:
        html_str = MarkdownUtils.convert_markdown_to_html(markdown_text)

        # prepend additional CSS style

        # known available asian fonts in PDF by default (Acrobat Reader)
        # https://xhtml2pdf.readthedocs.io/en/latest/reference.html#asian-fonts-support
        # TODO: make font list configurable
        font_families = ",".join(
            [
                "Sans-serif",  # for English
                "STSong-Light",  # for Simplified Chinese
                "MSung-Light",  # for Traditional Chinese
                "HeiseiMin-W3",  # for Japanese
            ]
        )
        css_style = f"""
        <style>
            html {{
                -pdf-word-wrap: CJK;
                font-family:  "{font_families}"; 
            }}
        </style>
        """

        result = f"""
        {css_style}
        {html_str}
        """
        return result
